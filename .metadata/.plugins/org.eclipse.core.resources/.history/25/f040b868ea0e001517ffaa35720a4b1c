package cs211.imageprocessing;

import java.util.*;
import processing.core.*;

public class ImageProcessing extends PApplet {

    private static final long serialVersionUID = 1L;
    
    public static final int WIDTH    = 480;
    public static final int HEIGHT   = 360;
    
    PImage img;
    
    Filters filters;
    Sobel sobel;
    Hough hough;
    
    public static PGraphics quads;
    
    TwoDThreeD twoDthreeD;
    
    public void setup() {
        size(WIDTH * 3, HEIGHT);
        
        img = loadImage("board1.jpg");
        img.resize(WIDTH, HEIGHT);
        
        filters = new Filters(this, img);
        sobel = new Sobel(this, filters.getIntensityImg());
        hough = new Hough(this, sobel.img(), 200);
               
        noLoop();
    }
    
    public void draw() {
        background(255);
        image(img, 0, 0);
        hough.getIntersections();
        image(hough.getAccImg(), WIDTH, 0, WIDTH, HEIGHT);
        image(sobel.img(), WIDTH * 2, 0);
        
        ArrayList<PVector> corners;
        computeQuads(corners);
        PVector rot = twoDthreeD.get3DRotations(corners);
    }
    
    public PVector intersection(PVector line1, PVector line2) {
    	float d = PApplet.cos(line2.y) * PApplet.sin(line1.y) - PApplet.cos(line1.y) * PApplet.sin(line2.y);
        float x = (line2.x * PApplet.sin(line1.y) - line1.x * PApplet.sin(line2.y)) / d;
        float y = (-line2.x * PApplet.cos(line1.y) + line1.x * PApplet.cos(line2.y)) / d;
        
        return new PVector(x, y);
    }
    
    public void computeQuads(ArrayList<PVector> corners) {

        QuadGraph qg = new QuadGraph();
        qg.build(corners, WIDTH, HEIGHT);

        List<int[]> quads = qg.findCycles();

        quads.beginDraw();
        quads.clear();
        for (int[] quad : quads) {
            PVector l1 = corners.get(quad[0]);
            PVector l2 = corners.get(quad[1]);
            PVector l3 = corners.get(quad[2]);
            PVector l4 = corners.get(quad[3]);

            // (intersection() is a simplified version of the
            // intersections() method you wrote last week, that simply
            // return the coordinates of the intersection between 2 lines)
            PVector c12 = intersection(l1, l2);
            PVector c23 = intersection(l2, l3);
            PVector c34 = intersection(l3, l4);
            PVector c41 = intersection(l4, l1);
            if(QuadGraph.isConvex(c12, c23, c34, c41) ){//&& QuadGraph.nonFlatQuad(c12, c23, c34, c41)) {
                // Choose a random, semi-transparent colour
                Random random = new Random();
                quadsLayer.fill(color(min(255, random.nextInt(300)),
                        min(255, random.nextInt(300)),
                        min(255, random.nextInt(300)), 50));
                //quadsLayer.fill
                quadsLayer.quad(c12.x, c12.y, c23.x, c23.y, c34.x, c34.y, c41.x, c41.y);

            }

        }
        quads.endDraw();
        image(quads,0,0, WIDTH, HEIGHT);


    }
        
    public static void main(String[] args) {
        PApplet.main(new String[] { "--present", "cs211.imageprocessing.ImageProcessing" });
    }

}
